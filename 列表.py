# 使用中括号[]定义列表
a = [1, 342, 223, 'Bear', 'China']
# 列表长度
print('列表长度：', len(a))
# a[-1]=China,负数的下标表示从数组末尾开始计数，最后一位是-1,其次-2,-3...
print('a[0]={}, a[-1]={}'.format(a[0], a[-1]))  # a[0]=1, a[-1]=China
# 对列表进行切片,冒号左边开始截取，冒号右边的结束，包含冒号左边的下标，不包含冒号右边的下标
# 需要注意的是切片返回列表一个新的（浅）拷贝副本
print('a[2:4] = ', a[2:4])  # [223, 'Bear']
print('a[:4] = ', a[:4])  # [1, 342, 223, 'Bear'] 左边省略默认从0开始
print('a[2:] = ', a[2:])  # [223, 'Bear', 'China'] 右边省略默认为列表大小，即截取到末尾(包含末尾)
print('a[:] = ', a[:])  # [1, 342, 223, 'Bear', 'China']
print('a[2:9] = ', a[2:9])  # [223, 'Bear', 'China'] 切片冒号右侧越界会智能截取到末尾,但a[9]会报数组越界错误
print('a[-2:9] = ', a[-2:9])  # ['Bear', 'China']
print('a[4:3] = ', a[4:3])  # [] 切片左值大于右值返回空列表
# 切片设置步长
print('a[1:4:2] = ', a[1:4:2])  # a[1:4:2] = [342, 'Bear'], 表示从下标1到4，每隔两个元素取值
print('a[1::2] = ', a[1::2])  # a[1::2] = [342, 'Bear'], 表示从下标1到末尾，每隔两个元素取值
# 列表连接
b = a + [1, 'yang']
print("a + [1, 'yang'] = ", b)  # a + [1, 'yang'] =  [1, 342, 223, 'Bear', 'China', 1, 'yang']
# 赋值,注意，这里的写法和切片一样，但实际上是赋值语法，所以可以改变原数组，而作为切片语法使用时不会
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
# 替换某些值
letters[2:5] = ['C', 'D', 'E']  # letters = ['a', 'b', 'C', 'D', 'E', 'f', 'g']
# 现在移除他们
letters[2:5] = []  # letters = ['a', 'b', 'f', 'g']
# 通过替换所有元素为空列表来清空这个列表
letters[:] = []  # letters = []
# 检查某个值在不在列表中
print('Bear in a: ', 'Bear' in a)
# 判断列表是否为空
print('a is not empty: ', bool(a))
a = []
if a:
    print('a is not empty')
else:
    print('a is empty')

